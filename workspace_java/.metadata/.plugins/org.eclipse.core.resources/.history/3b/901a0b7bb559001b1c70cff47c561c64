package np.com.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import np.admin.model.AdminDao;
import np.com.util.HashMapBinder;
import np.mem.model.MemberDao;

//member/*.np
public class MemberController implements Action{
	Logger logger = Logger.getLogger(MemberController.class);

	public ModelAndView execute(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {

		HttpSession session = req.getSession(true);
		
		ModelAndView mav = new ModelAndView(req, res);
		PrintWriter out = res.getWriter();
		String pageName = (String)req.getAttribute("pageName");//memberList
		
		MemberDao memDao = MemberDao.getInstance();
		AdminDao adMemDao = AdminDao.getInstance();
		
		Gson g = null;
	    Map<String,Object> pmap = new HashMap<>();
		HashMapBinder hmb = new HashMapBinder(req);
		hmb.bind(pmap);
		
		String forJson = null;	//json 을 위한 String
		
		logger.info("MemC map>>>>>>"+pmap);
		
		if(pageName.equals("memLogin")) {//로그인
			List<Map<String, Object>> list = memDao.Login(pmap);
			logger.info("MemberC - nick, id list or msg"+list);
			for(Map<String,Object> map:list) {
				if(map.get("MSG") == null) {
					session.setAttribute("id", map.get("M_ID"));
					session.setAttribute("nick", map.get("M_NICK"));
					session.setMaxInactiveInterval(300);//세션유지시간 30분
					pageName="index"; // 로그인 됐을때 보낼 페이지
				}
				else {
//					pageName="index";//로그인 안됐을때 보낼 페이지
				}
			}
		}
		else if(pageName.equals("kakaoLogin")) {
			List<Map<String, Object>> list = memDao.Login(pmap);
			logger.info("MCon kakao "+list);
			String code = null;
//			code = 
			for(Map<String,Object> map:list) {
				if(map.get("MSG") == null) {
					session.setAttribute("id", map.get("M_ID"));
					session.setAttribute("nick", map.get("M_NICK"));
					session.setMaxInactiveInterval(300);//세션유지시간 30분
					pageName="index"; // 로그인 됐을때 보낼 페이지
				}
			}
		}
		else if(pageName.equals("memRegi")) {//회원가입
			pmap.put("field","REGISTER");//회원가입 필드 설정
			String msg =memDao.memRegister(pmap);
			logger.info("MemberC - memRegiMsg >>>> "+msg);
			mav.addObject("msg", msg);
		}
		else if(pageName.equals("idCheckRegi")) {//회원가입창 ID중복검사
			pmap.put("field","ID_CHECK");
			String msg =memDao.memRegister(pmap);
			logger.info("MemberC - idCheckMsg >>>> "+msg);
			mav.addObject("msg", msg);
		}
		else if(pageName.equals("nickCheckRegi")) {//회원가입창 닉네임 중복검사
			pmap.put("field","NICK_CHECK");
			String msg =memDao.memRegister(pmap);
			logger.info("MemberC - nickCheckRegiMsg >>>> "+msg);
			mav.addObject("msg", msg);
		}
		else if(pageName.equals("myPage")) {//마이페이지
			pmap.put("field","MY_PAGE");
			List<Map<String, Object>> list =memDao.myPage(pmap);
			logger.info("MemberC - myPage >>>> "+list);
			mav.addObject("list", list);
		}
		else if(pageName.equals("checkCookClass")) {//나의 쿠킹클래스 확인하기(마이페이지부분)
			pmap.put("field","CHECK_COOKCLASS");
			List<Map<String, Object>> list =memDao.myPage(pmap);
			logger.info("MemberC - checkCookClass >>>> "+list);
			g = new Gson();
			forJson = g.toJson(list);
		}
		else if(pageName.equals("memUpd")) {//회원정보수정
			String msg =memDao.updateMypage(pmap);
			logger.info("MemberC - memUpdMsg >>>> "+msg);
			mav.addObject("msg", msg);
		}
		else if(pageName.equals("withDrawal")) {//회원탈퇴
			String msg =memDao.withDraw(pmap);
			logger.info("MemberC - nickCheckRegiMsg >>>> "+msg);
			mav.addObject("msg", msg);
		}
		else if(pageName.equals("idSearch")) {//id찾기
			pmap.put("field","ID_SEARCH");
			pmap.put("m_id","");
			logger.info("MemberC - idSearchpmap>>>> "+pmap);
			String msg =memDao.forgotID_PW(pmap);
			logger.info("MemberC - idSearchMsg >>>> "+msg);
			mav.addObject("msg", msg);
		}
		else if(pageName.equals("pwSearch")) {//pw찾기
			pmap.put("field","PW_SEARCH");
			String msg =memDao.forgotID_PW(pmap);
			logger.info("MemberC -  pwSearchMsg >>>> "+msg);
			mav.addObject("msg", msg);
		}
		else if(pageName.equals("memReport")) {//회원 신고
			String msg =memDao.memReport(pmap);
			logger.info("MemberC -  memReport >>>> "+msg);
			mav.addObject("msg", msg);
		}
		else if(pageName.equals("submitResume")) {//셰프 양식서 제출
			pmap.put("field","SUBMIT_RESUME");
			String msg =memDao.chefResume(pmap);
			logger.info("MemberC -  submitResume >>>> "+msg);
			mav.addObject("msg", msg);
		}
		else if(pageName.equals("popRecipeNum")) {//내 인기게시물 개수 (3개이상 or 3개미만)
			pmap.put("field","POP_RECIPE_NUM");
			String msg =memDao.chefResume(pmap);
			logger.info("MemberC -  popRecipeNum >>>> "+msg);
			mav.addObject("msg", msg);
		}
		else if(pageName.equals("chefRanking")) {//셰프들의 랭킹
			pmap.put("field","CHEF_RANKING");
			pmap.put("m_id","");
			List<Map<String, Object>> list =memDao.chefDetail(pmap);
			logger.info("MemberC -  chefRanking >>>> "+list);
			g = new Gson();
			forJson = g.toJson(list);
		}
		else if(pageName.equals("chefBoard")) {//셰프 클릭했을때 해당 셰프의 게시글 보여줌
			pmap.put("field","CHECK_CHEF");
			List<Map<String, Object>> list =memDao.chefDetail(pmap);
			logger.info("MemberC -  chefBoard >>>> "+list);
			g = new Gson();
			forJson = g.toJson(list);
		}
		
		//admin 해야함
		
		if(g == null) {
			mav.setViewName(pageName+".jsp");
		}else {
			res.setContentType("application/json; charset=utf-8");
			out.print(forJson);
		}
		
		return mav;
	}
	public HashMap<String, Object> getUserInfo (String access_Token) {
	    //    요청하는 클라이언트마다 가진 정보가 다를 수 있기에 HashMap타입으로 선언
	    HashMap<String, Object> userInfo = new HashMap<>();
	    String reqURL = "https://kapi.kakao.com/v2/user/me";
	    try {
	        URL url = new URL(reqURL);
	        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
	        conn.setRequestMethod("POST");
	        
	        //    요청에 필요한 Header에 포함될 내용
	        conn.setRequestProperty("Authorization", "Bearer " + access_Token);
	        
	        int responseCode = conn.getResponseCode();
	        System.out.println("responseCode : " + responseCode);
	        
	        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
	        
	        String line = "";
	        String result = "";
	        
	        while ((line = br.readLine()) != null) {
	            result += line;
	        }
	        System.out.println("response body : " + result);
	        
	        JsonParser parser = new JsonParser();
	        JsonElement element = parser.parse(result);
	        
	        JsonObject properties = element.getAsJsonObject().get("properties").getAsJsonObject();
	        JsonObject kakao_account = element.getAsJsonObject().get("kakao_account").getAsJsonObject();
	        
	        String nickname = properties.getAsJsonObject().get("nickname").getAsString();
	        String email = kakao_account.getAsJsonObject().get("email").getAsString();
	        
	        userInfo.put("nickname", nickname);
	        userInfo.put("email", email);
	        
	    } catch (IOException e) {
	        e.printStackTrace();
	    }
	    
	    return userInfo;
	}

	
}
