package np.com.controller;


import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.databind.JsonNode;

import np.mem.model.KakaoDao;
import np.mem.model.MemberDao;

@Controller
@RequestMapping("/*")
public class LoginController {
	Logger logger = Logger.getLogger(LoginController.class);
	private final static String K_CLIENT_ID = "f61c36ee28b1fe4d00e270bcf75d344d";
	private final static String K_REDIRECT_URI = "http://192.168.0.38:8000/member/index.np";
	
	@Autowired
    private KakaoDao kakao;
	
	@Autowired
	private MemberDao memDao;
	String path = null;
	String name = null;
	
		@RequestMapping(value="/")
	    public String index() {
	        logger.info("Con index");
	        return "index";
	    }
	    
		@RequestMapping(value="member/index.np")
		public String login(HttpSession session,  @RequestParam("code") String code, HttpServletRequest req) throws Exception {
//		public String login(HttpSession session, HttpServletRequest req) throws Exception {
//			JsonNode userInfo = kakaoLogin.getKakaoUserInfo(code);
	        if((String)req.getAttribute("kakaoNick")!=null) {
	        	name = (String)req.getAttribute("kakaoNick");
	        } else {
	        	path = "redirect:login.jsp";
	        }
	        logger.info("name"+name);
	        if (name != null) {
	        	logger.info("Con 세션 도착");
	        	path = "forward:index.jsp";
	        } else {
	        	logger.info("Con 세션 도착 실패");
	        	path = "forward:index2.jsp";
	        }
	        return path;
	    }
	

	    public String getAuthorizationUrl(HttpSession session) {

	      String kakaoUrl = "https://kauth.kakao.com/oauth/authorize?"
	          + "client_id=" + K_CLIENT_ID + "&redirect_uri="
	          + K_REDIRECT_URI + "&response_type=code";
	      return kakaoUrl;
	    }

	    public String getAccessToken(String autorize_code) {

	      final String RequestUrl = "https://kauth.kakao.com/oauth/token";
	      final List<NameValuePair> postParams = new ArrayList<NameValuePair>();
	      postParams.add(new BasicNameValuePair("grant_type", "authorization_code"));
	      postParams.add(new BasicNameValuePair("client_id", K_CLIENT_ID)); // REST API KEY
	      postParams.add(new BasicNameValuePair("redirect_uri", K_REDIRECT_URI)); // 리다이렉트 URI
	      postParams.add(new BasicNameValuePair("code", autorize_code)); // 로그인 과정 중 얻은 code 값

	      final HttpClient client = HttpClientBuilder.create().build();
	      final HttpPost post = new HttpPost(RequestUrl);
	      JsonNode returnNode = null;

	      try {

	        post.setEntity(new UrlEncodedFormEntity(postParams));
	        final HttpResponse response = client.execute(post);
	        final int responseCode = response.getStatusLine().getStatusCode();

	        // JSON 형태 반환값 처리

	        ObjectMapper mapper = new ObjectMapper();
	        returnNode = mapper.readTree(response.getEntity().getContent());

	      } catch (UnsupportedEncodingException e) {

	        e.printStackTrace();

	      } catch (ClientProtocolException e) {

	        e.printStackTrace();

	      } catch (IOException e) {

	        e.printStackTrace();

	      } finally {
	        // clear resources
	      }
	      return returnNode.get("access_token").toString();
	    }

	    public JsonNode getKakaoUserInfo(String autorize_code) {

	      final String RequestUrl = "https://kapi.kakao.com/v1/user/me";
	      //String CLIENT_ID = K_CLIENT_ID; // REST API KEY
	      //String REDIRECT_URI = K_REDIRECT_URI; // 리다이렉트 URI
	      //String code = autorize_code; // 로그인 과정중 얻은 토큰 값
	      final HttpClient client = HttpClientBuilder.create().build();
	      final HttpPost post = new HttpPost(RequestUrl);
	      String accessToken = getAccessToken(autorize_code);
	      // add header
	      post.addHeader("Authorization", "Bearer " + accessToken);

	      JsonNode returnNode = null;

	      try {

	        final HttpResponse response = client.execute(post);
	        final int responseCode = response.getStatusLine().getStatusCode();
	        System.out.println("\nSending 'POST' request to URL : " + RequestUrl);
	        System.out.println("Response Code : " + responseCode);

	        // JSON 형태 반환값 처리
	        ObjectMapper mapper = new ObjectMapper();
	        returnNode = mapper.readTree(response.getEntity().getContent());
	      } catch (UnsupportedEncodingException e) {

	        e.printStackTrace();
	      } catch (ClientProtocolException e) {

	        e.printStackTrace();
	      } catch (IOException e) {

	        e.printStackTrace();
	      } finally {

	        // clear resources
	      }
	      return returnNode;
	    }
}
