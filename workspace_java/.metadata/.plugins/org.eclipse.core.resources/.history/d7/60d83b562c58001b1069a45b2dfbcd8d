<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>카카오 로그인</title>
<script src="https://developers.kakao.com/sdk/js/kakao.min.js"></script>
<script type="text/javascript" src="http://code.jquery.com/jquery-1.11.3.min.js"></script>
</head>
<body>
<!-- =============================== 카카오 로그인 ================================================== -->
<div id="kakao-login-btn"></div>
<script type='text/javascript'>
//     <![CDATA[
   // 사용할 앱의 JavaScript 키를 설정해 주세요.
   Kakao.init('f61c36ee28b1fe4d00e270bcf75d344d');
   
   // 카카오 로그인 버튼을 생성합니다.
   Kakao.Auth.createLoginButton({
     container: '#kakao-login-btn',
     success: function(authObj) {
//     	 alert(JSON.stringify(authObj));
    	 // 로그인 성공시, API를 호출합니다.
    	     Kakao.API.request({
    	      url: '/v2/user/me',
    	      success: function(response) {
    	       	var user = response.kakao_account //계정 정보
    	       	user.host = 'kakao'
    	       	var userEmail = response.kaccount_email;   //유저의 이메일
    	       	var kakao = response.properties.nickname; //유저가 등록한 별명
//     	       	alert(M_NICK);
    	       	session.setAttribute("kakao",kakao);




    	      },
    	      fail: function(error) {
    	          alert(JSON.stringify(error));
    	         }
    	      });
     		Kakao.Auth.authorize({
     			  redirectUri: 'http://192.168.0.38:9000/member/index.jsp'
     			});
    	  },
    	  fail: function(err) {
    	  	alert(JSON.stringify(err));
    	  }

    });
   
   
// routes/auth/kakao.js
   /**
    * @summary 사용자 계정을 provider 로 연동. 인증 정보와 함께 저장
    *
    * @param {*} session 사용자 세션
    * @param {*} provider 공급사
    * @param {*} authData 인증 정보
    */
   function linkUser(session, provider, authData) {
     let result = false;
     if (session.authData) {
       if (session.authData[provider]) {
         // 이미 계정에 provider 가 연결되어 있는 경우
         return result;
       }

       session.authData[provider] = authData;
     } else {
       session.authData = {
         [provider]: authData
       };
     }

     result = true;

     return result;
   }

   /**
    * 
    * @summary '사용자 서비스 동의' 완료 후, 이동되는 주소.
    *
    * @description
    * - 사용자로부터 동의를 구한 후, 서비스 내에서 처리할 로직을 구현합니다.
    */

   router.get("/callback", async (req, res) => {
     const { session, query } = req;
     const { code } = query;

     console.info("==== session ====");
     console.log(session);

     let tokenResponse;
     try {
       // Authorization Server 부터 Access token 발급받기
       tokenResponse = await axios({
         method: "POST",
         url: 'https://kauth.kakao.com/oauth/token',
         headers: {
           "content-type": "application/x-www-form-urlencoded"
         },
         data: qs.stringify({
           grant_type: "authorization_code",
           client_id: f61c36ee28b1fe4d00e270bcf75d344d,
           client_secret: kakao.clientSecret,
           redirect_uri: kakao.redirectUri,
           code
         })
       });
     } catch (error) {
       return res.json(error.data);
     }

     console.info("==== tokenResponse.data ====");
     console.log(tokenResponse.data);

     const { access_token } = tokenResponse.data;

     let userResponse;
     try {
       // access_token 으로 사용자 정보 요청하기
       userResponse = await axios({
         method: "GET",
         url: "https://kapi.kakao.com/v2/user/me",
         headers: {
           Authorization: `Bearer ${access_token}`
         }
       });
     } catch (error) {
       return res.json(error.data);
     }

     console.info("==== userResponse.data ====");
     console.log(userResponse.data);

     const authData = {
       ...tokenResponse.data,
       ...userResponse.data
     };

     const result = linkUser(session, "kakao", authData);

     if (result) {
       console.info("계정에 연결되었습니다.");
     } else {
       console.warn("이미 연결된 계정입니다.");
     }

     res.redirect("/");
   });
</script>
<!-- =============================== 카카오 로그인 ================================================== -->


</body>
</html>