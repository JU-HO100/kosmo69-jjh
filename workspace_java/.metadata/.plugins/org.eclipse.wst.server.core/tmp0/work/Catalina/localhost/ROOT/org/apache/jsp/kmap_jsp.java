/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.38
 * Generated at: 2021-01-27 06:08:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class kmap_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


	String c_map = request.getParameter("c_map");
	System.out.print(c_map);
 	String c_detail = request.getParameter("c_detail");
 	System.out.print(c_detail);
// 	String c_map = "가산동 371-16 IT캐슬2차";
// 	String c_map = "가산디지털1로 137";
// 	String c_detail = "2층 kosmo 한국소프트웨어 인재개발원";

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>카카오 맵</title>\r\n");
      out.write("<!-- <script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=15f5287d753e527b86e1f231f7128313\"></script> -->\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"map\" style=\"width:100%;height:950px;\"></div>\r\n");
      out.write("\t<!-- services 라이브러리 불러오기 -->\r\n");
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=15f5287d753e527b86e1f231f7128313&libraries=services\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\tvar mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("\t\t    mapOption = {\r\n");
      out.write("\t\t        center: new kakao.maps.LatLng(37.521655, 126.924241), // 지도의 중심좌표 -\r\n");
      out.write("\t\t        level: 4, // 지도의 확대 레벨\r\n");
      out.write("\t\t        mapTypeId : kakao.maps.MapTypeId.ROADMAP //지도 종류\r\n");
      out.write("\t\t    };\r\n");
      out.write("\t\t// 지도를 생성합니다    \r\n");
      out.write("\t\tlet map = new kakao.maps.Map(mapContainer, mapOption); \r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 주소-좌표 변환 객체를 생성합니다\r\n");
      out.write("\t\tvar geocoder = new kakao.maps.services.Geocoder();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 지도에 확대 축소 컨트롤을 생성한다\r\n");
      out.write("\t\tlet zoomControl = new kakao.maps.ZoomControl();\r\n");
      out.write("\t\t// 지도의 우측에 확대 축소 컨트롤을 추가한다\r\n");
      out.write("\t\tmap.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 장소 검색 객체를 생성합니다\r\n");
      out.write("\t\tlet ps = new kakao.maps.services.Places(); \r\n");
      out.write("\r\n");
      out.write("\t\t// 주소로 좌표를 검색합니다\r\n");
      out.write("\r\n");
      out.write("\t\tgeocoder.addressSearch(\"");
      out.print(c_map);
      out.write("\", function(result, status) {\r\n");
      out.write("\r\n");
      out.write("\t\t    // 정상적으로 검색이 완료됐으면 \r\n");
      out.write("\t\t     if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("\t\t        var coords = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n");
      out.write("\r\n");
      out.write("\t\t        // 결과값으로 받은 위치를 마커로 표시합니다\r\n");
      out.write("\t\t        var marker = new kakao.maps.Marker({\r\n");
      out.write("\t\t            map: map,\r\n");
      out.write("\t\t            position: coords\r\n");
      out.write("\t\t        });\r\n");
      out.write("\r\n");
      out.write("\t\t        // 인포윈도우로 장소에 대한 설명을 표시합니다\r\n");
      out.write("\t\t        var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("\t\t            content: '<div style=\"width:150px;text-align:center;padding:6px 0;\">\"");
      out.print(c_detail);
      out.write("\"</div>'\r\n");
      out.write("\t\t        });\r\n");
      out.write("\t\t        infowindow.open(map, marker);\r\n");
      out.write("\t\t        // 지도의 중심을 결과값으로 받은 위치로 이동시킵니다\r\n");
      out.write("\t\t        map.setCenter(coords);\r\n");
      out.write("\t\t    } \r\n");
      out.write("\t\t}); \r\n");
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 키워드로 장소를 검색합니다\r\n");
      out.write("\r\n");
      out.write("// \t\tps.keywordSearch('가산역', placesSearchCB); // 중심좌표가 다른 곳이여도 검색한곳으로 뜸\r\n");
      out.write("\r\n");
      out.write("\t\t// 키워드 검색 완료 시 호출되는 콜백함수 입니다\r\n");
      out.write("// \t\tfunction placesSearchCB (data, status, pagination) {\r\n");
      out.write("// \t\t    if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("\r\n");
      out.write("// \t\t        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n");
      out.write("// \t\t        // LatLngBounds 객체에 좌표를 추가합니다\r\n");
      out.write("// \t\t        var bounds = new kakao.maps.LatLngBounds();\r\n");
      out.write("\r\n");
      out.write("// \t\t        for (var i=0; i<data.length; i++) {\r\n");
      out.write("// \t\t            displayMarker(data[i]);    \r\n");
      out.write("// \t\t            bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\r\n");
      out.write("// \t\t        }       \r\n");
      out.write("\r\n");
      out.write("// \t\t        // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\r\n");
      out.write("// \t\t        map.setBounds(bounds);\r\n");
      out.write("// \t\t    } \r\n");
      out.write("// \t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t// 지도에 마커를 표시하는 함수입니다\r\n");
      out.write("// \t\tfunction displayMarker(place) {\r\n");
      out.write("\t\t    \r\n");
      out.write("// \t\t\t// 마커를 생성하고 지도에 표시합니다\r\n");
      out.write("// \t\t    var marker = new kakao.maps.Marker({\r\n");
      out.write("// \t\t        map: map,\r\n");
      out.write("// // \t\t    \tvar iwContent = '<div style=\"padding:5px;\">실습장소<br><a href=\"https://map.kakao.com/link/map/안녕!,37.554577363425814,126.98810984875148\" style=\"color:blue\" target=\"_blank\">큰지도보기</a></div>',\r\n");
      out.write(" \r\n");
      out.write("// \t\t        position: new kakao.maps.LatLng(place.y, place.x) \r\n");
      out.write("// \t\t    });\r\n");
      out.write("\t\t    \r\n");
      out.write("// \t\t\t// 마커를 클릭하면 장소명을 표출할 인포윈도우 입니다\r\n");
      out.write("// \t\t\tvar infowindow = new kakao.maps.InfoWindow({zIndex:1});\r\n");
      out.write("\r\n");
      out.write("// \t\t    // 마커에 클릭이벤트를 등록합니다\r\n");
      out.write("// \t\t    kakao.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("// \t\t        // 마커를 클릭하면 장소명이 인포윈도우에 표출됩니다\r\n");
      out.write("\r\n");
      out.write("// \t\t        infowindow.open(map, marker);\r\n");
      out.write("// \t\t    });\r\n");
      out.write("// \t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t</script>\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
