/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.38
 * Generated at: 2021-01-05 00:59:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

public final class read_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/common/easyUI_common.jsp", Long.valueOf(1608771953305L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.HashMap");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");

/*
 UI를 무엇으로 하는가?
		 js기반인 경우:json으로 처리한다. jsonBoardList.jsp 생성하기
		 아래코드는 필요없다.:부트스트랩, 시맨틱UI, EasyUI
		 , 안드로이드(특별한 경우를 제외하면 오라클과 매번 연동하지 않는다, 오라클 대신 NoSQL제품과 연동한다.)
		xml기반인 경우 : 넥사크로, 플렉스, 트러스트 폼....
		조회결과를 xml문서로 출력해준다. - contentType:text/xml
	넥사크로에서는 조회된 결과를 넥사크로 에서 제공하는 DataSet객체에 담아준다
	화면을 지원하는 Grid와 DataSet을 매핑하여 출력함.
		xmlBoardList.jsp가 필요하다. - xml로 만들어지는 별도의 jsp
	그러나 넥사크로측에서는 이러한 불편함을 해소하기 위해 직접 자바단에서 xml포맷을 생성해주는 api를 지원하고 있다.
*/
	int tot = 0;
	List<Map<String,Object>> boardList = null;
	boardList = (List<Map<String,Object>>)request.getAttribute("boardDetail");
	Map<String,Object> rMap = new HashMap<>();
	if(boardList !=null){
		rMap = boardList.get(0);
	}
	

      out.write("       \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>상세보기[WEB-INF]</title>\r\n");
      out.write("<!-- ìì¤ê° íëë¡ í©ì³ì§ëê¹ ì ì¸ë¬¸ì´ ë ë² ì¬ íììë¤. -->\r\n");
      out.write("\t<link rel=\"shortcut icon\" href=\"image/favicon.ico\">\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://www.jeasyui.com/easyui/themes/default/easyui.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://www.jeasyui.com/easyui/themes/icon.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://www.jeasyui.com/easyui/themes/color.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://www.jeasyui.com/easyui/demo/demo.css\">\r\n");
      out.write("    <script type=\"text/javascript\" src=\"https://www.jeasyui.com/easyui/jquery.min.js\"></script>\r\n");
      out.write("    <script type=\"text/javascript\" src=\"/js/commons.js\"></script>\r\n");
      out.write("    <script type=\"text/javascript\" src=\"https://www.jeasyui.com/easyui/jquery.easyui.min.js\"></script>\r\n");
      out.write("    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery-cookie/1.4.1/jquery.cookie.min.js\"></script>");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("/* 댓글과 새글의 차이는 뭘까?\r\n");
      out.write("   새글에는 없지만 댓글에는 있다?\r\n");
      out.write("  글번호 : 새글이나 댓글 이나 모두 새로 채번되어야 한다. - 생각 정리 - 기능설계 -  필요한 정보선택\r\n");
      out.write("  글그룹번호 : 댓글에 또 댓글을 달수 있다. - 업무요구사항 - 새로 채번되는 것이 아니라 있는 번호를 가져온다.\r\n");
      out.write("  댓글의 경우 \r\n");
      out.write("  read.jsp 시작된다.\r\n");
      out.write("  select가 한 건이 되었다.\r\n");
      out.write("  내 뒤에 댓글이 존재할 경우 b_step의 값을 1씩 증가시켜야 한다. - 공감\r\n");
      out.write("  update 테이블명\r\n");
      out.write("     set bm_step = bm_step + 1\r\n");
      out.write("   where bm_group = 5  read.jsp\r\n");
      out.write("      and bm_step > 화면에서 가져온 bm_step값 read.jsp\r\n");
      out.write("*/\r\n");
      out.write("\tfunction repleForm(){\r\n");
      out.write("\t\tlet url=\"repleForm.sp?bm_no=\"+");
      out.print(rMap.get("BM_NO").toString());
      out.write(";//var대신 ECMAScript제안한 let예약어 사용할것.- Reat.js, Vue.js, TypeScript.js\r\n");
      out.write("\t\tcmm_window_popup(url,\"700px\",\"500px\",\"repleForm\");\t\t\t\t\r\n");
      out.write("\t}\r\n");
      out.write("  \tfunction refresh(){\r\n");
      out.write("\t\t//alert(\"refresh호출\");\r\n");
      out.write("\t\tlocation.href=\"/board/boardList.sp\";\t\t\r\n");
      out.write("\t}      \r\n");
      out.write("  \tfunction deleteView(){\r\n");
      out.write("  \t\t$('#dlg_boardDel').dialog({\r\n");
      out.write("  \t\t\tbuttons: btn_boardDel,\r\n");
      out.write("  \t\t    title: '글 삭제',\r\n");
      out.write("  \t\t    width: 400,\r\n");
      out.write("  \t\t    height: 250,\r\n");
      out.write("  \t\t    closed: true,\r\n");
      out.write("  \t\t    cache: false,\r\n");
      out.write("  \t\t    href: 'boardDelForm.jsp?bm_no=");
      out.print(rMap.get("BM_NO"));
      out.write("&bm_pw");
      out.print(rMap.get("BM_PW"));
      out.write("',\r\n");
      out.write("  \t\t    modal: true\r\n");
      out.write("  \t\t});\r\n");
      out.write("  \t\t$('#dlg_boardDel').dialog('open');\r\n");
      out.write("  \t}\r\n");
      out.write("  \tfunction deleteboard(){\r\n");
      out.write("  \t\t//DB에서 받아온 비번을 담기\r\n");
      out.write("  \t\t//자바스크립트 변수 선언시 앞으로는 var대신에 let함수를 사용하자 - ES5추천\r\n");
      out.write("  \t\t//전변과 지변차이, 버그에 대한 예방 - 스크립트는 컴파일을 하지 않음.\r\n");
      out.write("  \t\t//타입이 런타임시에 결정이된다. - 파이썬도 동일한 구조를 가지고 있다. - 모두가 객체이면서 타입을 정하지 않아도 들어오는 값에 따라 결정이 된다.\r\n");
      out.write("  \t\t//파이썬 같은 경우 순차적으로 실행이 된다.\r\n");
      out.write("  \t\tlet db_pw = ");
      out.print(rMap.get("BM_PW") );
      out.write("\r\n");
      out.write("  \t\t//사용자가 입력한 비번 담기\r\n");
      out.write("  \t\tlet u_pw = $(\"#u_pw\").textbox('getValue');\r\n");
      out.write("\t\tif(db_pw == u_pw){\r\n");
      out.write("\t\t\t//자바스크립트에서는 0이 아니면 모두가 true 이다\r\n");
      out.write("\t\t\t$.messager.confirm('Confirm','정말 삭제할거니?',function(r){\r\n");
      out.write("\t\t\t\tif(r){\r\n");
      out.write("// \t\t\t\t\talert('ok');\r\n");
      out.write("\t\t\t\t\tlocation.href=\"boardDelete.sp?bm_no=");
      out.print(rMap.get("BM_NO"));
      out.write("&bs_file=");
      out.print(rMap.get("BS_FILE"));
      out.write("\";\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\t\r\n");
      out.write("  \t}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!--===========================[[ 글상세 보기 화면 ]]===========================-->\r\n");
      out.write("<table id=\"pan_read\" class=\"easyui-panel\" title=\"글상세보기\" data-options=\"footer:'#tb_read'\"\r\n");
      out.write(" style=\"width:670px;height:380px;padding:10px;background:#fafafa;\">\r\n");
      out.write("   <tr>\r\n");
      out.write("      <td>제목</td>\r\n");
      out.write("      <td><input class=\"easyui-textbox\" value=\"");
      out.print(rMap.get("BM_TITLE") );
      out.write("\" id=\"bm_title\" data-options=\"width:'450px'\"></td>\r\n");
      out.write("   </tr>\r\n");
      out.write("   <tr>\r\n");
      out.write("      <td>작성자</td>\r\n");
      out.write("      <td><input class=\"easyui-textbox\" value=\"");
      out.print(rMap.get("BM_WRITER") );
      out.write("\" id=\"bm_writer\" data-options=\"width:'450px'\"></td>\r\n");
      out.write("   </tr>\r\n");
      out.write("   <tr>\r\n");
      out.write("      <td>이메일</td>\r\n");
      out.write("      <td><input class=\"easyui-textbox\" value=\"");
      out.print(rMap.get("BM_EMAIL") );
      out.write("\" id=\"bm_email\" data-options=\"width:'450px'\"></td>\r\n");
      out.write("   </tr>\r\n");
      out.write("   <tr>\r\n");
      out.write("      <td>내용</td>\r\n");
      out.write("      <td><input class=\"easyui-textbox\" value=\"");
      out.print(rMap.get("BM_CONTENT") );
      out.write("\" id=\"bm_content\" data-options=\"multiline:'true',width:'450px', height:'90px'\"></td>\r\n");
      out.write("   </tr>\r\n");
      out.write("   <tr>\r\n");
      out.write("      <td>비밀번호</td>\r\n");
      out.write("      <td><input class=\"easyui-textbox\" value=\"");
      out.print(rMap.get("BM_PW") );
      out.write("\" id=\"bm_pw\" data-options=\"width:'450px'\"></td>\r\n");
      out.write("   </tr>\r\n");
      out.write("</table>\r\n");
      out.write("<!--===========================[[ 글상세 보기 화면 버튼 ]]===========================-->\r\n");
      out.write(" <div id=\"tb_read\" style=\"padding:2px 5px;\" align=\"center\">\r\n");
      out.write("    <a href=\"javascript:repleForm()\" class=\"easyui-linkbutton\" iconCls=\"icon-edit\" plain=\"true\">댓글쓰기</a>\r\n");
      out.write("    <a href=\"javascript:updateForm()\" class=\"easyui-linkbutton\" iconCls=\"icon-add\" plain=\"true\">수정</a>\r\n");
      out.write("    <a href=\"javascript:deleteboard()\" class=\"easyui-linkbutton\" iconCls=\"icon-remove\" plain=\"true\">삭제</a>\r\n");
      out.write("    <a href=\"javascript:boardList()\" class=\"easyui-linkbutton\" iconCls=\"icon-search\" plain=\"true\">목록</a>\r\n");
      out.write("</div>\r\n");
      out.write("<!--===========================[[ 댓글쓰기 화면 시작  ]]===========================-->\r\n");
      out.write("\r\n");
      out.write("<!--===========================[[ 댓글쓰기 화면  끝   ]]===========================-->\r\n");
      out.write("<!--===========================[[ 글삭제 화면 시작  ]]===========================-->\r\n");
      out.write("<div id=\"dlg_boardDel\" closed=\"true\" class=\"easyui-dialog\" style=\"padding:20px 50px\">\r\n");
      out.write("\t<div id=\"btn_boardDel\" align=\"right\">\r\n");
      out.write("\t\t<a href=\"javascript:deleteBoard()\" class=\"easyui-linkbutton\" iconCls=\"icon-ok\" plain=\"true\">확인</a>\r\n");
      out.write("\t\t<a href=\"javascript:deleteClose()\" class=\"easyui-linkbutton\" iconCls=\"icon-cancel\" plain=\"true\">닫기</a>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("<!--===========================[[ 글삭제 화면  끝   ]]===========================-->\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
